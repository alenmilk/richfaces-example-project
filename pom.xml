<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>no.usit</groupId>
  <artifactId>course-example</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>Course registration example</name>
  <description>Course registration example</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Timestamp format for the maven.build.timestamp property -->
    <!-- You can reference property in pom.xml or filtered resources (must enable third-party plugin if using Maven < 2.1) -->
    <maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
    <!-- Set the jboss.home property in an active profile of the $HOME/.m2/settings.xml to specify the JBoss AS directory 
      the "Maven way" -->
    <!-- By default, we assign it to the value of the JBOSS_HOME envrionment variable -->
    <jboss-javaee6-spec.version>1.0.0.Final</jboss-javaee6-spec.version>
    <hibernate.version>3.6.1.Final</hibernate.version>
    <seam.version>3.0.0.Final</seam.version>
    <org.richfaces.bom.version>4.0.0.20110227-CR1</org.richfaces.bom.version>
    <version.org.jboss.jbossas>6.0.0.Final</version.org.jboss.jbossas>
    <version.junit>4.8.1</version.junit>
    <org.richfaces.bom.version>4.0.0.Final</org.richfaces.bom.version>
  </properties>

  <repositories>
    <!-- The JBoss Community public repository is a composite repository of several major repositories -->
    <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
    <!-- At the time of writing, Arquillian and the JBoss Java EE specification POMs are only in the JBoss Community public 
      repository (not Maven central) -->
    <repository>
      <id>atlassian</id>
      <name>Atlassian Repository</name>
      <url>https://maven.atlassian.com/content/groups/public</url>
      <!-- These optional flags are designed to speed up your builds by reducing remote server calls -->
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>

  </repositories>


  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>org.jboss.seam</groupId>
        <artifactId>seam-bom</artifactId>
        <version>${seam.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.richfaces</groupId>
        <artifactId>richfaces-bom</artifactId>
        <version>${org.richfaces.bom.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>

      <!-- org.jboss.jbossas -->
      <dependency>
        <groupId>org.jboss.jbossas</groupId>
        <artifactId>jboss-as-depchain</artifactId>
        <version>${version.org.jboss.jbossas}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Java EE 6 API dependency -->
    <!-- This one dependency imports all APIs available for a Java EE 6.0 application -->
    <dependency>
      <groupId>org.jboss.spec</groupId>
      <artifactId>jboss-javaee-6.0</artifactId>
      <version>${jboss-javaee6-spec.version}</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <!-- org.jboss.jbossas -->

    <dependency>
      <groupId>org.jboss.jbossas</groupId>
      <artifactId>jboss-as-depchain</artifactId>
      <version>${version.org.jboss.jbossas}</version>
      <type>pom</type>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.jboss.seam.integration</groupId>
          <artifactId>jboss-seam-int-jbossas</artifactId>
        </exclusion>
      </exclusions>

    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <version>1.0.0.Final</version>
      <scope>provided</scope>
      <!-- Excluded because it's provided by the Java EE 6 dependencies -->
      <exclusions>
        <exclusion>
          <groupId>org.hibernate.javax.persistence</groupId>
          <artifactId>hibernate-jpa-2.0-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.5.10</version>
      <scope>provided</scope>
    </dependency>

    <!-- JSR-303 (Bean Validation) Implementation -->
    <!-- Provides portable constraints such as @Email -->
    <!-- Hibernate Validator is the only JSR-303 implementation at the moment, so we can assume it's provided -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>4.0.0.GA</version>
      <scope>provided</scope>
    </dependency>

    <!-- Needed for running tests (you may also use TestNG) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>1.6.2</version>
    </dependency>


    <dependency>
      <groupId>org.jboss.seam.solder</groupId>
      <artifactId>seam-solder</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam.faces</groupId>
      <artifactId>seam-faces-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam.faces</groupId>
      <artifactId>seam-faces</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam.international</groupId>
      <artifactId>seam-international</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam.persistence</groupId>
      <artifactId>seam-persistence</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.seam.security</groupId>
      <artifactId>seam-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>${hibernate.version}</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>xml-apis</groupId>
          <artifactId>xml-apis</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.transaction</groupId>
          <artifactId>jta</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam.catch</groupId>
      <artifactId>seam-catch</artifactId>
    </dependency>

    <dependency>
      <groupId>org.richfaces.ui</groupId>
      <artifactId>richfaces-components-ui</artifactId>
    </dependency>
    <dependency>
      <groupId>org.richfaces.core</groupId>
      <artifactId>richfaces-core-impl</artifactId>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <!-- Compiler plugin enforces Java 1.6 compatibility and controls execution of annotation processors -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.1</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
          <compilerArgument>-proc:none</compilerArgument>
          <showDeprecation>false</showDeprecation>
          <showWarnings>true</showWarnings>
          <compilerVersion>1.6</compilerVersion>
          <fork>true</fork>
          <argLine>-Xmx512M</argLine>
        </configuration>
        <executions>
          <execution>
            <id>run-annotation-processors-only</id>
            <phase>generate-sources</phase>
            <configuration>
              <compilerArgument>-proc:only</compilerArgument>
              <!-- If your app has multiple packages, use this include filter to execute the processor only on the package 
                containing your entities -->
              <!-- <includes> <include>**/model/*.java</include> </includes> -->
            </configuration>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Surefire -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
          <trimStackTrace>false</trimStackTrace>
          <printSummary>true</printSummary>
          <includes>
            <include>**/*UnitTest.java</include>
          </includes>
        </configuration>
      </plugin>

      <!-- Build helper plugin adds the sources generated by the JPA 2 annotation processor to the compile path -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <phase>process-sources</phase>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/annotations</source>
              </sources>
            </configuration>
            <goals>
              <goal>add-source</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- The default profile skips all tests, though you can tune it to run just unit tests based on a custom pattern -->
      <!-- Seperate profiles are provided for running all tests, including Arquillian tests that execute in the specified 
        container -->
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.4.3</version>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>
</project>
